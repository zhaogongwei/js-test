/* 
JavaScript是采用词法作用域的，这就意味着函数的执行依赖于函数定义的时候所产生（而不是函数调用的时候产生的）的变量作用域。为了去实现这种词法作用域，JavaScript函数对象的内部状态不仅包含函数逻辑的代码，除此之外还包含当前作用域链的引用。函数对象可以通过这个作用域链相互关联起来，如此，函数体内部的变量都可以保存在函数的作用域内，这在计算机的文献中被称之为闭包。

从技术的角度去将，所有的JavaScript函数都是闭包：他们都是对象，他们都有一个关联到他们的作用域链。绝大多数函数在调用的时候使用的作用域链和他们在定义的时候的作用域链是相同的，但是这并不影响闭包。当调用函数的时候闭包所指向的作用域链和定义函数时的作用域链不是同一个作用域链的时候，闭包become interesting。这种interesting的事情往往发生在这样的情况下： 当一个函数嵌套了另外的一个函数，外部的函数将内部嵌套的这个函数作为对象返回。一大批强大的编程技术都利用了这类嵌套的函数闭包，当然，javascript也是这样。可能你第一次碰见闭包觉得比较难以理解，但是去明白闭包然后去非常自如的使用它是非常重要的。

通俗点说，在程序语言范畴内的"闭包"是指函数把其的变量作用域也包含在这个函数的作用域内，形成一个所谓的“闭包”，这样的话外部的函数就无法去访问内部变量。所以按照第二段所说的，严格意义上所有的函数都是闭包。

需要注意的是：我们常常所说的"闭包"指的是让外部函数访问到内部的变量，也就是说，按照一般的做法，是使内部函数返回一个函数，然后操作其中的变量。这样做的话一是可以读取函数内部的变量，二是可以让这些变量的值始终保存在内存中。

JavaScript利用"闭包"的这个特性，就意味着当前的作用域总是能够访问外部作用域中的变量。
*/
{
    function counter(start){
        let count = start;
        return {
            add:function(){
                count++
            },
            get:function(){
                return count
            }
        }
    }
    const foo = counter(4)
    foo.add()
    foo.get() //5
}
//JavaScript不可以强行对作用域进行引用或者赋值），唯一可以使用的途径就是以这种闭包的形式去访问。
{
    for (var i = 0; i < 10; i++) {
        setTimeout (function () {
            console.log (i);    //10 10 10 ....
        }, 1000);
    }
    /* 
        解析：匿名函数保持对外部变量的引用，这个时候for 循环早就已经运行结束，setTimeout　中的 i　都共享的是这个函数中的作用域, 也就是说，他们是共享的。这样的话下一次循环就使得　i　值进行变化，这样共享的这个 i 就会发生变化。这就使得输出的结果一直是　10
    */
}
{
    //方法1：
    for (var i = 0; i < 10; i++) {
        (function (e) {
          setTimeout (function () {
            console.log (e);
          }, 1000);
        })(i);
    }
    
    //方法2：
    for(var i=0; i<10;i++){
        setTimeout((function(e){
            return function(){
                console.log(e)
            }
        })(i),1000)
    }

    /* 
      解析：外部套着的这个函数不会像setTimeout一样延迟，而是直接立即执行，并且把i作为他的参数，这个时候e就是对i的一个拷贝。当时间达到后，传给setTimeout的时候，传递的是e的引用。这个值是不会被循环所改变的
    */
}